from typing import Any, Dict, Callable


class MultipartEncoder:
    boundary_value: Any
    boundary: Any
    encoding: Any
    fields: Any
    finished: bool
    parts: Any
    def __init__(self, fields: Dict[str, Any], boundary: Any | None = ..., encoding: str = ...) -> None: ...
    @property
    def len(self) -> int: ...
    @property
    def content_type(self) -> str: ...
    def to_string(self) -> bytes: ...
    def read(self, size: int = ...) -> bytes: ...


class MultipartEncoderMonitor(object):
    encoder: MultipartEncoder
    callback: Callable[[MultipartEncoderMonitor], Any]
    bytes_read: int
    len: int
    def __init__(self, encoder: MultipartEncoder, callback: Callable[[MultipartEncoderMonitor], Any] = ...) -> None: ...
    @classmethod
    def from_fields(cls, fields: Dict[str, Any], boundary: Any = ..., encoding: str = ..., callback: Callable[[MultipartEncoderMonitor], Any] = ...) -> MultipartEncoderMonitor: ...
    @property
    def content_type(self) -> str: ...
    def to_string(self) -> str: ...
    def read(self, size: int = ...) -> str: ...
